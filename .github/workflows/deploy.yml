name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install client dependencies
      run: cd client && npm ci

    - name: Run tests
      run: npm run test:ci
      env:
        NODE_ENV: test

    - name: Build client
      run: cd client && npm run build

    - name: Build server
      run: npm run build:server

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: embedded-platform
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

        # Push images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

        # Export image URI for deployment
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster embedded-platform-staging \
          --service embedded-platform-service \
          --force-new-deployment \
          --task-definition $(aws ecs describe-task-definition \
            --task-definition embedded-platform-staging \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

    - name: Run database migrations
      run: |
        aws ecs run-task \
          --cluster embedded-platform-staging \
          --task-definition embedded-platform-migration \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-12345,subnet-67890],securityGroups=[sg-12345],assignPublicIp=ENABLED}"

    - name: Health check
      run: |
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster embedded-platform-staging \
          --services embedded-platform-service

        # Perform health check
        HEALTH_CHECK_URL="https://staging-api.embedded-platform.com/health"
        for i in {1..30}; do
          if curl -f -s "$HEALTH_CHECK_URL" > /dev/null; then
            echo "Health check passed"
            break
          fi
          echo "Waiting for health check... ($i/30)"
          sleep 10
        done

        if [ $i -eq 30 ]; then
          echo "Health check failed"
          exit 1
        fi

  deploy-production:
    if: github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to production ECS
      run: |
        aws ecs update-service \
          --cluster embedded-platform-production \
          --service embedded-platform-service \
          --force-new-deployment \
          --task-definition $(aws ecs describe-task-definition \
            --task-definition embedded-platform-production \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

    - name: Run production database migrations
      run: |
        aws ecs run-task \
          --cluster embedded-platform-production \
          --task-definition embedded-platform-migration-prod \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-prod-12345,subnet-prod-67890],securityGroups=[sg-prod-12345],assignPublicIp=ENABLED}"

    - name: Production health check
      run: |
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster embedded-platform-production \
          --services embedded-platform-service

        # Perform health check
        HEALTH_CHECK_URL="https://api.embedded-platform.com/health"
        for i in {1..60}; do
          if curl -f -s "$HEALTH_CHECK_URL" > /dev/null; then
            echo "Production health check passed"
            break
          fi
          echo "Waiting for production health check... ($i/60)"
          sleep 10
        done

        if [ $i -eq 60 ]; then
          echo "Production health check failed"
          exit 1
        fi

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: 'Production deployment completed successfully'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: 'Production deployment failed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    if: failure() && github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Rollback production deployment
      run: |
        # Get previous task definition
        PREVIOUS_TASK_DEF=$(aws ecs describe-services \
          --cluster embedded-platform-production \
          --services embedded-platform-service \
          --query 'services[0].taskDefinition' \
          --output text)

        # Rollback to previous version
        aws ecs update-service \
          --cluster embedded-platform-production \
          --service embedded-platform-service \
          --task-definition $PREVIOUS_TASK_DEF \
          --force-new-deployment

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        text: 'Production deployment rolled back due to failure'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}