import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useProject } from '../../context/ProjectContext';
import { useCollaboration } from '../../context/CollaborationContext';
import {
  Plus,
  Search,
  Filter,
  Grid,
  List,
  Star,
  Clock,
  Users,
  Share2,
  Settings,
  Play,
  Pause,
  RotateCcw,
  Save,
  Download,
  Upload,
  Eye,
  EyeOff,
  Zap,
  Cpu,
  Wifi,
  Bluetooth
} from 'lucide-react';

const UserDashboard = () => {
  const { user, profile } = useAuth();
  const { projects, currentProject, setCurrentProject, createProject, deleteProject } = useProject();
  const { isConnected: collabConnected, connectedUsers } = useCollaboration();

  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'list'
  const [searchTerm, setSearchTerm] = useState('');
  const [filterBy, setFilterBy] = useState('all'); // 'all', 'recent', 'shared', 'starred'
  const [sortBy, setSortBy] = useState('updated'); // 'updated', 'created', 'name', 'size'
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [newProjectName, setNewProjectName] = useState('');
  const [newProjectDescription, setNewProjectDescription] = useState('');
  const [workspaceTab, setWorkspaceTab] = useState('overview');

  // Filter and sort projects
  const filteredProjects = projects
    .filter(project => {
      const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          project.description?.toLowerCase().includes(searchTerm.toLowerCase());

      switch (filterBy) {
        case 'recent':
          return matchesSearch && new Date(project.updated_at) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        case 'shared':
          return matchesSearch && project.visibility !== 'private';
        case 'starred':
          return matchesSearch && project.starred;
        default:
          return matchesSearch;
      }
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'created':
          return new Date(b.created_at) - new Date(a.created_at);
        case 'name':
          return a.name.localeCompare(b.name);
        case 'size':
          // Could implement based on project complexity/size
          return 0;
        default: // 'updated'
          return new Date(b.updated_at) - new Date(a.updated_at);
      }
    });

  const handleCreateProject = async () => {
    if (!newProjectName.trim()) return;

    try {
      await createProject({
        name: newProjectName,
        description: newProjectDescription,
        circuitData: {
          nodes: [],
          edges: [],
          viewport: { x: 0, y: 0, zoom: 1 }
        },
        code: `// Arduino code for ${newProjectName}
// Generated by AI-Embedded Platform

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Add your setup code here
}

void loop() {
  // Add your main code here

  delay(1000);
}`
      });

      setNewProjectName('');
      setNewProjectDescription('');
      setShowCreateModal(false);
    } catch (error) {
      console.error('Error creating project:', error);
    }
  };

  const handleProjectClick = (project) => {
    setCurrentProject(project);
    setWorkspaceTab('design');
  };

  const ProjectCard = ({ project }) => (
    <div className="project-card" onClick={() => handleProjectClick(project)}>
      <div className="project-header">
        <div className="project-icon">
          <Cpu size={24} />
        </div>
        <div className="project-actions">
          <button className="action-btn" onClick={(e) => { e.stopPropagation(); /* star */ }}>
            <Star size={16} />
          </button>
          <button className="action-btn" onClick={(e) => { e.stopPropagation(); /* share */ }}>
            <Share2 size={16} />
          </button>
        </div>
      </div>

      <div className="project-content">
        <h3 className="project-name">{project.name}</h3>
        <p className="project-description">
          {project.description || 'No description provided'}
        </p>

        <div className="project-meta">
          <div className="meta-item">
            <Clock size={14} />
            <span>{new Date(project.updated_at).toLocaleDateString()}</span>
          </div>
          <div className="meta-item">
            <Users size={14} />
            <span>{project.collaborators || 1} member{project.collaborators !== 1 ? 's' : ''}</span>
          </div>
        </div>

        <div className="project-tags">
          {project.tags?.map((tag, index) => (
            <span key={index} className="tag">{tag}</span>
          ))}
        </div>
      </div>

      <div className="project-footer">
        <div className="project-stats">
          <span className="stat">
            <Zap size={14} />
            {project.components || 0} components
          </span>
          <span className="stat">
            <Wifi size={14} />
            {project.simulations || 0} simulations
          </span>
        </div>

        <div className="project-visibility">
          {project.visibility === 'public' && <Eye size={14} />}
          {project.visibility === 'private' && <EyeOff size={14} />}
          {project.visibility === 'team' && <Users size={14} />}
        </div>
      </div>
    </div>
  );

  const ProjectListItem = ({ project }) => (
    <div className="project-list-item" onClick={() => handleProjectClick(project)}>
      <div className="list-icon">
        <Cpu size={20} />
      </div>

      <div className="list-content">
        <div className="list-header">
          <h3 className="project-name">{project.name}</h3>
          <div className="list-actions">
            <button className="action-btn" onClick={(e) => { e.stopPropagation(); /* star */ }}>
              <Star size={16} />
            </button>
            <button className="action-btn" onClick={(e) => { e.stopPropagation(); /* share */ }}>
              <Share2 size={16} />
            </button>
          </div>
        </div>

        <p className="project-description">
          {project.description || 'No description provided'}
        </p>

        <div className="list-meta">
          <span className="meta-item">
            <Clock size={14} />
            Updated {new Date(project.updated_at).toLocaleDateString()}
          </span>
          <span className="meta-item">
            <Users size={14} />
            {project.collaborators || 1} member{project.collaborators !== 1 ? 's' : ''}
          </span>
          <span className="meta-item">
            <Zap size={14} />
            {project.components || 0} components
          </span>
          <span className="meta-item">
            <Wifi size={14} />
            {project.simulations || 0} simulations
          </span>
        </div>

        <div className="list-tags">
          {project.tags?.map((tag, index) => (
            <span key={index} className="tag">{tag}</span>
          ))}
        </div>
      </div>

      <div className="list-visibility">
        {project.visibility === 'public' && <Eye size={14} />}
        {project.visibility === 'private' && <EyeOff size={14} />}
        {project.visibility === 'team' && <Users size={14} />}
      </div>
    </div>
  );

  const renderProjectsView = () => (
    <div className="projects-view">
      <div className="projects-header">
        <div className="header-content">
          <h2>My Projects</h2>
          <p>Create and manage your embedded systems projects</p>
        </div>

        <div className="header-actions">
          <div className="search-bar">
            <Search size={16} />
            <input
              type="text"
              placeholder="Search projects..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <select
            value={filterBy}
            onChange={(e) => setFilterBy(e.target.value)}
            className="filter-select"
          >
            <option value="all">All Projects</option>
            <option value="recent">Recent</option>
            <option value="shared">Shared</option>
            <option value="starred">Starred</option>
          </select>

          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value)}
            className="sort-select"
          >
            <option value="updated">Last Updated</option>
            <option value="created">Date Created</option>
            <option value="name">Name</option>
          </select>

          <div className="view-toggle">
            <button
              className={viewMode === 'grid' ? 'toggle-btn active' : 'toggle-btn'}
              onClick={() => setViewMode('grid')}
            >
              <Grid size={16} />
            </button>
            <button
              className={viewMode === 'list' ? 'toggle-btn active' : 'toggle-btn'}
              onClick={() => setViewMode('list')}
            >
              <List size={16} />
            </button>
          </div>

          <button
            className="btn-primary create-btn"
            onClick={() => setShowCreateModal(true)}
          >
            <Plus size={16} />
            New Project
          </button>
        </div>
      </div>

      <div className="projects-stats">
        <div className="stat-item">
          <span className="stat-number">{projects.length}</span>
          <span className="stat-label">Total Projects</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">
            {projects.filter(p => p.visibility !== 'private').length}
          </span>
          <span className="stat-label">Shared Projects</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">
            {projects.filter(p => new Date(p.updated_at) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)).length}
          </span>
          <span className="stat-label">Active This Week</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">
            {projects.reduce((sum, p) => sum + (p.components || 0), 0)}
          </span>
          <span className="stat-label">Total Components</span>
        </div>
      </div>

      <div className={`projects-grid ${viewMode}`}>
        {filteredProjects.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">
              <Cpu size={48} />
            </div>
            <h3>No projects found</h3>
            <p>
              {searchTerm
                ? `No projects match "${searchTerm}"`
                : 'Create your first embedded systems project to get started'
              }
            </p>
            <button
              className="btn-primary"
              onClick={() => setShowCreateModal(true)}
            >
              <Plus size={16} />
              Create Project
            </button>
          </div>
        ) : (
          filteredProjects.map(project => (
            viewMode === 'grid' ? (
              <ProjectCard key={project.id} project={project} />
            ) : (
              <ProjectListItem key={project.id} project={project} />
            )
          ))
        )}
      </div>
    </div>
  );

  const renderWorkspaceView = () => (
    <div className="workspace-view">
      <div className="workspace-header">
        <div className="workspace-info">
          <h2>{currentProject?.name}</h2>
          <p>{currentProject?.description}</p>
          <div className="workspace-meta">
            <span className="meta-item">
              <Clock size={14} />
              Updated {new Date(currentProject?.updated_at).toLocaleDateString()}
            </span>
            {collabConnected && (
              <span className="meta-item collaboration">
                <Users size={14} />
                {connectedUsers.length} online
              </span>
            )}
          </div>
        </div>

        <div className="workspace-actions">
          <button className="btn-secondary">
            <Share2 size={16} />
            Share
          </button>
          <button className="btn-secondary">
            <Download size={16} />
            Export
          </button>
          <button className="btn-secondary">
            <Settings size={16} />
            Settings
          </button>
          <button className="btn-primary">
            <Save size={16} />
            Save
          </button>
        </div>
      </div>

      <div className="workspace-tabs">
        <button
          className={workspaceTab === 'overview' ? 'workspace-tab active' : 'workspace-tab'}
          onClick={() => setWorkspaceTab('overview')}
        >
          📊 Overview
        </button>
        <button
          className={workspaceTab === 'design' ? 'workspace-tab active' : 'workspace-tab'}
          onClick={() => setWorkspaceTab('design')}
        >
          🎨 Circuit Design
        </button>
        <button
          className={workspaceTab === '3d' ? 'workspace-tab active' : 'workspace-tab'}
          onClick={() => setWorkspaceTab('3d')}
        >
          🎯 3D View
        </button>
        <button
          className={workspaceTab === 'simulation' ? 'workspace-tab active' : 'workspace-tab'}
          onClick={() => setWorkspaceTab('simulation')}
        >
          ⚡ Simulation
        </button>
        <button
          className={workspaceTab === 'hardware' ? 'workspace-tab active' : 'workspace-tab'}
          onClick={() => setWorkspaceTab('hardware')}
        >
          🔌 Hardware
        </button>
        <button
          className={workspaceTab === 'ai' ? 'workspace-tab active' : 'workspace-tab'}
          onClick={() => setWorkspaceTab('ai')}
        >
          🤖 AI Assistant
        </button>
        <button
          className={workspaceTab === 'code' ? 'workspace-tab active' : 'workspace-tab'}
          onClick={() => setWorkspaceTab('code')}
        >
          💻 Code Editor
        </button>
      </div>

      <div className="workspace-content">
        {workspaceTab === 'overview' && (
          <div className="overview-tab">
            <div className="overview-grid">
              <div className="overview-card">
                <h3>Project Statistics</h3>
                <div className="stats-grid">
                  <div className="stat-item">
                    <span className="stat-number">{currentProject?.components || 0}</span>
                    <span className="stat-label">Components</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-number">{currentProject?.simulations || 0}</span>
                    <span className="stat-label">Simulations</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-number">{currentProject?.aiInteractions || 0}</span>
                    <span className="stat-label">AI Interactions</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-number">
                      {Math.round((new Date() - new Date(currentProject?.created_at)) / (1000 * 60 * 60 * 24))}
                    </span>
                    <span className="stat-label">Days Active</span>
                  </div>
                </div>
              </div>

              <div className="overview-card">
                <h3>Quick Actions</h3>
                <div className="quick-actions">
                  <button
                    className="action-btn"
                    onClick={() => setWorkspaceTab('design')}
                  >
                    <Plus size={16} />
                    Add Component
                  </button>
                  <button
                    className="action-btn"
                    onClick={() => setWorkspaceTab('simulation')}
                  >
                    <Play size={16} />
                    Run Simulation
                  </button>
                  <button
                    className="action-btn"
                    onClick={() => setWorkspaceTab('ai')}
                  >
                    <Zap size={16} />
                    Ask AI
                  </button>
                  <button
                    className="action-btn"
                    onClick={() => setWorkspaceTab('hardware')}
                  >
                    <Bluetooth size={16} />
                    Connect Hardware
                  </button>
                </div>
              </div>

              <div className="overview-card">
                <h3>Recent Activity</h3>
                <div className="activity-list">
                  <div className="activity-item">
                    <div className="activity-icon">
                      <Save size={16} />
                    </div>
                    <div className="activity-content">
                      <span className="activity-text">Project saved</span>
                      <span className="activity-time">2 minutes ago</span>
                    </div>
                  </div>
                  <div className="activity-item">
                    <div className="activity-icon">
                      <Play size={16} />
                    </div>
                    <div className="activity-content">
                      <span className="activity-text">Simulation completed</span>
                      <span className="activity-time">5 minutes ago</span>
                    </div>
                  </div>
                  <div className="activity-item">
                    <div className="activity-icon">
                      <Zap size={16} />
                    </div>
                    <div className="activity-content">
                      <span className="activity-text">AI code generated</span>
                      <span className="activity-time">10 minutes ago</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="overview-card">
                <h3>Project Health</h3>
                <div className="health-metrics">
                  <div className="health-item">
                    <span className="health-label">Circuit Completeness</span>
                    <div className="health-bar">
                      <div className="health-fill" style={{ width: '75%' }}></div>
                    </div>
                    <span className="health-value">75%</span>
                  </div>
                  <div className="health-item">
                    <span className="health-label">Code Quality</span>
                    <div className="health-bar">
                      <div className="health-fill" style={{ width: '85%' }}></div>
                    </div>
                    <span className="health-value">85%</span>
                  </div>
                  <div className="health-item">
                    <span className="health-label">Hardware Compatibility</span>
                    <div className="health-bar">
                      <div className="health-fill" style={{ width: '90%' }}></div>
                    </div>
                    <span className="health-value">90%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {workspaceTab === 'design' && (
          <div className="design-placeholder">
            <div className="placeholder-content">
              <Cpu size={48} />
              <h3>Circuit Designer</h3>
              <p>Drag and drop components to build your circuit</p>
              <button className="btn-primary">Open Designer</button>
            </div>
          </div>
        )}

        {workspaceTab === '3d' && (
          <div className="design-placeholder">
            <div className="placeholder-content">
              <Eye size={48} />
              <h3>3D Visualization</h3>
              <p>View your circuit in interactive 3D</p>
              <button className="btn-primary">Open 3D View</button>
            </div>
          </div>
        )}

        {workspaceTab === 'simulation' && (
          <div className="design-placeholder">
            <div className="placeholder-content">
              <Play size={48} />
              <h3>Circuit Simulation</h3>
              <p>Test your circuit virtually before hardware</p>
              <button className="btn-primary">Start Simulation</button>
            </div>
          </div>
        )}

        {workspaceTab === 'hardware' && (
          <div className="design-placeholder">
            <div className="placeholder-content">
              <Bluetooth size={48} />
              <h3>Hardware Integration</h3>
              <p>Connect and control real Arduino hardware</p>
              <button className="btn-primary">Connect Device</button>
            </div>
          </div>
        )}

        {workspaceTab === 'ai' && (
          <div className="design-placeholder">
            <div className="placeholder-content">
              <Zap size={48} />
              <h3>AI Assistant</h3>
              <p>Get help with circuit design and coding</p>
              <button className="btn-primary">Ask AI</button>
            </div>
          </div>
        )}

        {workspaceTab === 'code' && (
          <div className="design-placeholder">
            <div className="placeholder-content">
              <Settings size={48} />
              <h3>Code Editor</h3>
              <p>Write and edit Arduino C++ code</p>
              <button className="btn-primary">Open Editor</button>
            </div>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="user-dashboard">
      <div className="dashboard-navigation">
        <button
          className={workspaceTab === 'projects' ? 'nav-btn active' : 'nav-btn'}
          onClick={() => setWorkspaceTab('projects')}
        >
          📁 Projects
        </button>
        {currentProject && (
          <button
            className={workspaceTab !== 'projects' ? 'nav-btn active' : 'nav-btn'}
            onClick={() => setWorkspaceTab('overview')}
          >
            🏗️ Workspace
          </button>
        )}
      </div>

      <div className="dashboard-content">
        {workspaceTab === 'projects' ? renderProjectsView() : renderWorkspaceView()}
      </div>

      {/* Create Project Modal */}
      {showCreateModal && (
        <div className="modal-overlay" onClick={() => setShowCreateModal(false)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Create New Project</h3>
              <button
                className="modal-close"
                onClick={() => setShowCreateModal(false)}
              >
                ×
              </button>
            </div>

            <div className="modal-body">
              <div className="form-group">
                <label>Project Name</label>
                <input
                  type="text"
                  value={newProjectName}
                  onChange={(e) => setNewProjectName(e.target.value)}
                  placeholder="Enter project name"
                  className="form-input"
                />
              </div>

              <div className="form-group">
                <label>Description (Optional)</label>
                <textarea
                  value={newProjectDescription}
                  onChange={(e) => setNewProjectDescription(e.target.value)}
                  placeholder="Describe your project"
                  className="form-textarea"
                  rows={3}
                />
              </div>
            </div>

            <div className="modal-footer">
              <button
                className="btn-secondary"
                onClick={() => setShowCreateModal(false)}
              >
                Cancel
              </button>
              <button
                className="btn-primary"
                onClick={handleCreateProject}
                disabled={!newProjectName.trim()}
              >
                Create Project
              </button>
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        .user-dashboard {
          min-height: 100vh;
          background: #f8fafc;
        }

        .dashboard-navigation {
          background: white;
          border-bottom: 1px solid #e5e7eb;
          padding: 0 2rem;
          display: flex;
          gap: 0.5rem;
        }

        .nav-btn {
          padding: 1rem 1.5rem;
          border: none;
          background: none;
          cursor: pointer;
          font-size: 0.875rem;
          font-weight: 500;
          color: #6b7280;
          border-bottom: 2px solid transparent;
          transition: all 0.2s ease;
        }

        .nav-btn:hover {
          color: #374151;
          background: #f9fafb;
        }

        .nav-btn.active {
          color: #3b82f6;
          border-bottom-color: #3b82f6;
        }

        .dashboard-content {
          padding: 2rem;
        }

        .projects-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 2rem;
          gap: 2rem;
        }

        .header-content h2 {
          margin: 0 0 0.5rem 0;
          font-size: 1.875rem;
          font-weight: 700;
          color: #1f2937;
        }

        .header-content p {
          margin: 0;
          color: #6b7280;
        }

        .header-actions {
          display: flex;
          align-items: center;
          gap: 1rem;
          flex-wrap: wrap;
        }

        .search-bar {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          background: white;
          border: 1px solid #d1d5db;
          border-radius: 0.5rem;
          padding: 0.5rem 1rem;
          min-width: 250px;
        }

        .search-bar input {
          border: none;
          outline: none;
          flex: 1;
          font-size: 0.875rem;
        }

        .filter-select,
        .sort-select {
          padding: 0.5rem 1rem;
          border: 1px solid #d1d5db;
          border-radius: 0.5rem;
          background: white;
          font-size: 0.875rem;
        }

        .view-toggle {
          display: flex;
          border: 1px solid #d1d5db;
          border-radius: 0.5rem;
          overflow: hidden;
        }

        .toggle-btn {
          padding: 0.5rem;
          border: none;
          background: white;
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .toggle-btn:hover {
          background: #f3f4f6;
        }

        .toggle-btn.active {
          background: #3b82f6;
          color: white;
        }

        .create-btn {
          display: flex;
          align-items: center;
          gap: 0.5rem;
        }

        .projects-stats {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
          gap: 1rem;
          margin-bottom: 2rem;
        }

        .stat-item {
          background: white;
          padding: 1.5rem;
          border-radius: 0.5rem;
          text-align: center;
          border: 1px solid #e5e7eb;
        }

        .stat-number {
          display: block;
          font-size: 2rem;
          font-weight: 700;
          color: #1f2937;
          margin-bottom: 0.25rem;
        }

        .stat-label {
          font-size: 0.875rem;
          color: #6b7280;
        }

        .projects-grid.grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 1.5rem;
        }

        .projects-grid.list {
          display: flex;
          flex-direction: column;
          gap: 1rem;
        }

        .project-card {
          background: white;
          border: 1px solid #e5e7eb;
          border-radius: 0.5rem;
          padding: 1.5rem;
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .project-card:hover {
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
          border-color: #3b82f6;
        }

        .project-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 1rem;
        }

        .project-icon {
          color: #6b7280;
        }

        .project-actions {
          display: flex;
          gap: 0.5rem;
        }

        .action-btn {
          padding: 0.25rem;
          border: none;
          background: none;
          cursor: pointer;
          color: #6b7280;
          border-radius: 0.25rem;
          transition: all 0.2s ease;
        }

        .action-btn:hover {
          background: #f3f4f6;
          color: #374151;
        }

        .project-name {
          margin: 0 0 0.5rem 0;
          font-size: 1.125rem;
          font-weight: 600;
          color: #1f2937;
        }

        .project-description {
          margin: 0 0 1rem 0;
          color: #6b7280;
          font-size: 0.875rem;
          line-height: 1.4;
        }

        .project-meta {
          display: flex;
          gap: 1rem;
          margin-bottom: 1rem;
        }

        .meta-item {
          display: flex;
          align-items: center;
          gap: 0.25rem;
          font-size: 0.75rem;
          color: #9ca3af;
        }

        .project-tags {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
          margin-bottom: 1rem;
        }

        .tag {
          padding: 0.125rem 0.5rem;
          background: #f3f4f6;
          color: #374151;
          border-radius: 0.25rem;
          font-size: 0.75rem;
        }

        .project-footer {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }

        .project-stats {
          display: flex;
          gap: 1rem;
        }

        .stat {
          display: flex;
          align-items: center;
          gap: 0.25rem;
          font-size: 0.75rem;
          color: #6b7280;
        }

        .project-visibility {
          color: #6b7280;
        }

        .project-list-item {
          background: white;
          border: 1px solid #e5e7eb;
          border-radius: 0.5rem;
          padding: 1.5rem;
          cursor: pointer;
          transition: all 0.2s ease;
        }

        .project-list-item:hover {
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
          border-color: #3b82f6;
        }

        .list-content {
          flex: 1;
        }

        .list-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 0.5rem;
        }

        .list-actions {
          display: flex;
          gap: 0.5rem;
        }

        .list-meta {
          display: flex;
          gap: 1rem;
          margin-bottom: 0.75rem;
          flex-wrap: wrap;
        }

        .list-tags {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
        }

        .list-visibility {
          color: #6b7280;
          margin-left: 1rem;
        }

        .empty-state {
          grid-column: 1 / -1;
          text-align: center;
          padding: 4rem 2rem;
          background: white;
          border: 2px dashed #d1d5db;
          border-radius: 0.5rem;
        }

        .empty-icon {
          color: #9ca3af;
          margin-bottom: 1rem;
        }

        .empty-state h3 {
          margin: 0 0 0.5rem 0;
          font-size: 1.25rem;
          font-weight: 600;
          color: #1f2937;
        }

        .empty-state p {
          margin: 0 0 2rem 0;
          color: #6b7280;
        }

        .workspace-header {
          display: flex;
          justify-content: space-between;
          align-items: flex-start;
          margin-bottom: 2rem;
          background: white;
          padding: 2rem;
          border-radius: 0.5rem;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .workspace-info h2 {
          margin: 0 0 0.5rem 0;
          font-size: 1.875rem;
          font-weight: 700;
          color: #1f2937;
        }

        .workspace-info p {
          margin: 0 0 0.5rem 0;
          color: #6b7280;
        }

        .workspace-meta {
          display: flex;
          gap: 1rem;
        }

        .workspace-meta .meta-item {
          display: flex;
          align-items: center;
          gap: 0.25rem;
          font-size: 0.875rem;
          color: #6b7280;
        }

        .workspace-meta .collaboration {
          color: #10b981;
        }

        .workspace-actions {
          display: flex;
          gap: 1rem;
        }

        .workspace-tabs {
          display: flex;
          background: white;
          border-radius: 0.5rem;
          margin-bottom: 2rem;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
          overflow-x: auto;
        }

        .workspace-tab {
          padding: 1rem 1.5rem;
          border: none;
          background: none;
          cursor: pointer;
          font-size: 0.875rem;
          font-weight: 500;
          color: #6b7280;
          white-space: nowrap;
          transition: all 0.2s ease;
        }

        .workspace-tab:hover {
          color: #374151;
          background: #f9fafb;
        }

        .workspace-tab.active {
          color: #3b82f6;
          background: #eff6ff;
        }

        .workspace-content {
          background: white;
          border-radius: 0.5rem;
          padding: 2rem;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .overview-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 2rem;
        }

        .overview-card {
          background: #f9fafb;
          border-radius: 0.5rem;
          padding: 1.5rem;
        }

        .overview-card h3 {
          margin: 0 0 1.5rem 0;
          font-size: 1.125rem;
          font-weight: 600;
          color: #1f2937;
        }

        .stats-grid {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 1rem;
        }

        .quick-actions {
          display: grid;
          grid-template-columns: repeat(2, 1fr);
          gap: 1rem;
        }

        .action-btn {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          padding: 0.75rem 1rem;
          border: 1px solid #d1d5db;
          border-radius: 0.5rem;
          background: white;
          cursor: pointer;
          font-size: 0.875rem;
          font-weight: 500;
          transition: all 0.2s ease;
        }

        .action-btn:hover {
          border-color: #3b82f6;
          background: #f0f9ff;
        }

        .activity-list {
          display: flex;
          flex-direction: column;
          gap: 1rem;
        }

        .activity-item {
          display: flex;
          align-items: center;
          gap: 1rem;
        }

        .activity-icon {
          color: #6b7280;
        }

        .activity-text {
          font-weight: 500;
          color: #374151;
        }

        .activity-time {
          font-size: 0.875rem;
          color: #9ca3af;
        }

        .health-metrics {
          display: flex;
          flex-direction: column;
          gap: 1rem;
        }

        .health-item {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }

        .health-label {
          font-weight: 500;
          color: #374151;
        }

        .health-bar {
          flex: 1;
          height: 8px;
          background: #e5e7eb;
          border-radius: 4px;
          margin: 0 1rem;
          overflow: hidden;
        }

        .health-fill {
          height: 100%;
          background: #10b981;
          border-radius: 4px;
        }

        .health-value {
          font-weight: 600;
          color: #374151;
        }

        .design-placeholder {
          display: flex;
          align-items: center;
          justify-content: center;
          min-height: 400px;
        }

        .placeholder-content {
          text-align: center;
          color: #6b7280;
        }

        .placeholder-content h3 {
          margin: 1rem 0 0.5rem 0;
          font-size: 1.25rem;
          font-weight: 600;
          color: #1f2937;
        }

        .placeholder-content p {
          margin: 0 0 2rem 0;
        }

        .modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 1000;
        }

        .modal-content {
          background: white;
          border-radius: 0.5rem;
          width: 100%;
          max-width: 500px;
          max-height: 90vh;
          overflow-y: auto;
        }

        .modal-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 1.5rem;
          border-bottom: 1px solid #e5e7eb;
        }

        .modal-header h3 {
          margin: 0;
          font-size: 1.25rem;
          font-weight: 600;
          color: #1f2937;
        }

        .modal-close {
          background: none;
          border: none;
          font-size: 1.5rem;
          cursor: pointer;
          color: #6b7280;
        }

        .modal-body {
          padding: 1.5rem;
        }

        .form-group {
          margin-bottom: 1.5rem;
        }

        .form-group label {
          display: block;
          margin-bottom: 0.5rem;
          font-weight: 500;
          color: #374151;
        }

        .form-input,
        .form-textarea {
          width: 100%;
          padding: 0.75rem;
          border: 1px solid #d1d5db;
          border-radius: 0.5rem;
          font-size: 0.875rem;
        }

        .form-textarea {
          resize: vertical;
          min-height: 80px;
        }

        .modal-footer {
          display: flex;
          justify-content: flex-end;
          gap: 1rem;
          padding: 1.5rem;
          border-top: 1px solid #e5e7eb;
        }

        @media (max-width: 768px) {
          .dashboard-content {
            padding: 1rem;
          }

          .projects-header {
            flex-direction: column;
            align-items: stretch;
          }

          .header-actions {
            justify-content: center;
          }

          .projects-stats {
            grid-template-columns: repeat(2, 1fr);
          }

          .projects-grid.grid {
            grid-template-columns: 1fr;
          }

          .workspace-header {
            flex-direction: column;
            gap: 1rem;
          }

          .workspace-tabs {
            flex-wrap: wrap;
          }

          .workspace-tab {
            flex: 1;
            min-width: 120px;
          }

          .overview-grid {
            grid-template-columns: 1fr;
          }

          .stats-grid {
            grid-template-columns: 1fr;
          }

          .quick-actions {
            grid-template-columns: 1fr;
          }

          .modal-content {
            margin: 1rem;
            max-width: none;
          }
        }
      `}</style>
    </div>
  );
};

export default UserDashboard;