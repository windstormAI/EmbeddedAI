{"ast":null,"code":"var _s = $RefreshSig$();\n/**\r\n * Progressive Web App utilities\r\n * Handles service worker registration, offline detection, and PWA features\r\n */\n\nimport React from 'react';\nclass PWAUtils {\n  constructor() {\n    this.deferredPrompt = null;\n    this.isOnline = navigator.onLine;\n    this.serviceWorker = null;\n    this.registration = null;\n    this.init();\n  }\n  init() {\n    this.registerServiceWorker();\n    this.setupNetworkListeners();\n    this.setupInstallPrompt();\n    this.setupVisibilityChange();\n  }\n\n  // Service Worker Registration\n  async registerServiceWorker() {\n    if ('serviceWorker' in navigator) {\n      try {\n        this.registration = await navigator.serviceWorker.register('/sw.js', {\n          scope: '/'\n        });\n        console.log('[PWA] Service Worker registered:', this.registration.scope);\n\n        // Handle updates\n        this.registration.addEventListener('updatefound', () => {\n          const newWorker = this.registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                this.showUpdateNotification();\n              }\n            });\n          }\n        });\n\n        // Listen for messages from service worker\n        navigator.serviceWorker.addEventListener('message', event => {\n          this.handleServiceWorkerMessage(event);\n        });\n        return this.registration;\n      } catch (error) {\n        console.error('[PWA] Service Worker registration failed:', error);\n        return null;\n      }\n    } else {\n      console.warn('[PWA] Service Workers not supported');\n      return null;\n    }\n  }\n\n  // Network status monitoring\n  setupNetworkListeners() {\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.handleNetworkChange(true);\n    });\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n      this.handleNetworkChange(false);\n    });\n  }\n  handleNetworkChange(isOnline) {\n    // Dispatch custom event for React components\n    const event = new CustomEvent('networkChange', {\n      detail: {\n        isOnline\n      }\n    });\n    window.dispatchEvent(event);\n\n    // Show notification\n    if (isOnline) {\n      this.showNotification('Back online! Syncing your changes...', 'success');\n      this.syncOfflineData();\n    } else {\n      this.showNotification('You\\'re offline. Changes will sync when back online.', 'warning');\n    }\n  }\n\n  // Install prompt handling\n  setupInstallPrompt() {\n    window.addEventListener('beforeinstallprompt', event => {\n      event.preventDefault();\n      this.deferredPrompt = event;\n\n      // Show install button\n      this.showInstallPrompt();\n    });\n    window.addEventListener('appinstalled', () => {\n      console.log('[PWA] App installed successfully');\n      this.hideInstallPrompt();\n      this.trackEvent('app_installed');\n    });\n  }\n  showInstallPrompt() {\n    const event = new CustomEvent('showInstallPrompt', {\n      detail: {\n        prompt: this.deferredPrompt\n      }\n    });\n    window.dispatchEvent(event);\n  }\n  hideInstallPrompt() {\n    const event = new CustomEvent('hideInstallPrompt');\n    window.dispatchEvent(event);\n  }\n  async installApp() {\n    if (!this.deferredPrompt) return false;\n    try {\n      this.deferredPrompt.prompt();\n      const {\n        outcome\n      } = await this.deferredPrompt.userChoice;\n      if (outcome === 'accepted') {\n        console.log('[PWA] User accepted install prompt');\n        this.trackEvent('install_prompt_accepted');\n      } else {\n        console.log('[PWA] User dismissed install prompt');\n        this.trackEvent('install_prompt_dismissed');\n      }\n      this.deferredPrompt = null;\n      return outcome === 'accepted';\n    } catch (error) {\n      console.error('[PWA] Install prompt failed:', error);\n      return false;\n    }\n  }\n\n  // Visibility change handling\n  setupVisibilityChange() {\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.handleAppHidden();\n      } else {\n        this.handleAppVisible();\n      }\n    });\n  }\n  handleAppHidden() {\n    // Save any pending changes\n    this.savePendingChanges();\n  }\n  handleAppVisible() {\n    // Sync data and refresh if needed\n    if (this.isOnline) {\n      this.syncOfflineData();\n    }\n  }\n\n  // Offline data management\n  async savePendingChanges() {\n    try {\n      const pendingData = this.getPendingChanges();\n      if (pendingData && pendingData.length > 0) {\n        localStorage.setItem('pendingChanges', JSON.stringify(pendingData));\n        console.log('[PWA] Pending changes saved');\n      }\n    } catch (error) {\n      console.error('[PWA] Failed to save pending changes:', error);\n    }\n  }\n  async syncOfflineData() {\n    try {\n      const pendingChanges = localStorage.getItem('pendingChanges');\n      if (pendingChanges) {\n        const changes = JSON.parse(pendingChanges);\n\n        // Sync each change\n        for (const change of changes) {\n          await this.syncChange(change);\n        }\n\n        // Clear pending changes\n        localStorage.removeItem('pendingChanges');\n        console.log('[PWA] Offline data synced successfully');\n        this.showNotification('All changes synced successfully!', 'success');\n      }\n    } catch (error) {\n      console.error('[PWA] Failed to sync offline data:', error);\n      this.showNotification('Failed to sync some changes. Please try again.', 'error');\n    }\n  }\n  async syncChange(change) {\n    // Implement sync logic based on change type\n    switch (change.type) {\n      case 'project':\n        return this.syncProjectChange(change);\n      case 'circuit':\n        return this.syncCircuitChange(change);\n      case 'code':\n        return this.syncCodeChange(change);\n      default:\n        console.warn('[PWA] Unknown change type:', change.type);\n    }\n  }\n\n  // Background sync registration\n  async registerBackgroundSync(tag, data = {}) {\n    if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {\n      try {\n        await this.registration.sync.register(tag, {\n          data: data\n        });\n        console.log(`[PWA] Background sync registered: ${tag}`);\n      } catch (error) {\n        console.error(`[PWA] Background sync registration failed: ${tag}`, error);\n      }\n    }\n  }\n\n  // Push notifications\n  async requestNotificationPermission() {\n    if ('Notification' in window) {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    }\n    return false;\n  }\n  async showNotification(title, body, options = {}) {\n    if ('Notification' in window && Notification.permission === 'granted') {\n      const notificationOptions = {\n        icon: '/icons/icon-192x192.png',\n        badge: '/icons/icon-72x72.png',\n        vibrate: [100, 50, 100],\n        ...options\n      };\n      if (this.registration) {\n        this.registration.showNotification(title, {\n          body,\n          ...notificationOptions\n        });\n      } else {\n        new Notification(title, {\n          body,\n          ...notificationOptions\n        });\n      }\n    }\n  }\n\n  // Service worker message handling\n  handleServiceWorkerMessage(event) {\n    const {\n      type,\n      data\n    } = event.data;\n    switch (type) {\n      case 'SYNC_COMPLETE':\n        this.showNotification('Sync complete!', 'Your offline changes have been saved.', 'success');\n        break;\n      case 'CACHE_UPDATED':\n        this.showNotification('App updated', 'A new version is available. Refresh to update.', 'info');\n        break;\n      case 'OFFLINE_READY':\n        this.showNotification('Offline ready', 'You can now work offline!', 'success');\n        break;\n      default:\n        console.log('[PWA] Service worker message:', type, data);\n    }\n  }\n\n  // Update handling\n  showUpdateNotification() {\n    const event = new CustomEvent('appUpdateAvailable');\n    window.dispatchEvent(event);\n  }\n  async updateApp() {\n    if (this.registration && this.registration.waiting) {\n      this.registration.waiting.postMessage({\n        type: 'SKIP_WAITING'\n      });\n      window.location.reload();\n    }\n  }\n\n  // Analytics and tracking\n  trackEvent(eventName, data = {}) {\n    // Send to analytics service\n    if (window.gtag) {\n      window.gtag('event', eventName, data);\n    }\n\n    // Log for debugging\n    console.log('[PWA] Event tracked:', eventName, data);\n  }\n\n  // Utility methods\n  getPendingChanges() {\n    // Get pending changes from various sources\n    const changes = [];\n\n    // Add logic to collect pending changes from different parts of the app\n    // This would be implemented based on the specific data structures used\n\n    return changes;\n  }\n  isInstalled() {\n    return window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true;\n  }\n  getNetworkStatus() {\n    var _navigator$connection, _navigator$connection2, _navigator$connection3;\n    return {\n      isOnline: this.isOnline,\n      connectionType: ((_navigator$connection = navigator.connection) === null || _navigator$connection === void 0 ? void 0 : _navigator$connection.effectiveType) || 'unknown',\n      downlink: ((_navigator$connection2 = navigator.connection) === null || _navigator$connection2 === void 0 ? void 0 : _navigator$connection2.downlink) || 0,\n      rtt: ((_navigator$connection3 = navigator.connection) === null || _navigator$connection3 === void 0 ? void 0 : _navigator$connection3.rtt) || 0\n    };\n  }\n\n  // Storage management\n  async getStorageEstimate() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      try {\n        const estimate = await navigator.storage.estimate();\n        return {\n          quota: estimate.quota,\n          usage: estimate.usage,\n          usageDetails: estimate.usageDetails\n        };\n      } catch (error) {\n        console.error('[PWA] Storage estimate failed:', error);\n      }\n    }\n    return null;\n  }\n\n  // Cleanup\n  cleanup() {\n    // Remove event listeners\n    window.removeEventListener('online', this.handleNetworkChange);\n    window.removeEventListener('offline', this.handleNetworkChange);\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n  }\n}\n\n// Create singleton instance\nconst pwaUtils = new PWAUtils();\n\n// Export for use in React components\nexport default pwaUtils;\n\n// React hook for PWA functionality\nexport const usePWA = () => {\n  _s();\n  const [isOnline, setIsOnline] = React.useState(navigator.onLine);\n  const [isInstalled, setIsInstalled] = React.useState(pwaUtils.isInstalled());\n  const [showInstallPrompt, setShowInstallPrompt] = React.useState(false);\n  const [updateAvailable, setUpdateAvailable] = React.useState(false);\n  React.useEffect(() => {\n    const handleNetworkChange = event => {\n      setIsOnline(event.detail.isOnline);\n    };\n    const handleInstallPrompt = () => {\n      setShowInstallPrompt(true);\n    };\n    const handleHideInstallPrompt = () => {\n      setShowInstallPrompt(false);\n    };\n    const handleUpdateAvailable = () => {\n      setUpdateAvailable(true);\n    };\n    window.addEventListener('networkChange', handleNetworkChange);\n    window.addEventListener('showInstallPrompt', handleInstallPrompt);\n    window.addEventListener('hideInstallPrompt', handleHideInstallPrompt);\n    window.addEventListener('appUpdateAvailable', handleUpdateAvailable);\n    return () => {\n      window.removeEventListener('networkChange', handleNetworkChange);\n      window.removeEventListener('showInstallPrompt', handleInstallPrompt);\n      window.removeEventListener('hideInstallPrompt', handleHideInstallPrompt);\n      window.removeEventListener('appUpdateAvailable', handleUpdateAvailable);\n    };\n  }, []);\n  return {\n    isOnline,\n    isInstalled,\n    showInstallPrompt,\n    updateAvailable,\n    installApp: () => pwaUtils.installApp(),\n    updateApp: () => pwaUtils.updateApp(),\n    networkStatus: pwaUtils.getNetworkStatus(),\n    storageEstimate: pwaUtils.getStorageEstimate()\n  };\n};\n_s(usePWA, \"E/IJBQYXc1shr56JOoC2L1NlHnI=\");","map":{"version":3,"names":["React","PWAUtils","constructor","deferredPrompt","isOnline","navigator","onLine","serviceWorker","registration","init","registerServiceWorker","setupNetworkListeners","setupInstallPrompt","setupVisibilityChange","register","scope","console","log","addEventListener","newWorker","installing","state","controller","showUpdateNotification","event","handleServiceWorkerMessage","error","warn","window","handleNetworkChange","CustomEvent","detail","dispatchEvent","showNotification","syncOfflineData","preventDefault","showInstallPrompt","hideInstallPrompt","trackEvent","prompt","installApp","outcome","userChoice","document","hidden","handleAppHidden","handleAppVisible","savePendingChanges","pendingData","getPendingChanges","length","localStorage","setItem","JSON","stringify","pendingChanges","getItem","changes","parse","change","syncChange","removeItem","type","syncProjectChange","syncCircuitChange","syncCodeChange","registerBackgroundSync","tag","data","ServiceWorkerRegistration","prototype","sync","requestNotificationPermission","permission","Notification","requestPermission","title","body","options","notificationOptions","icon","badge","vibrate","updateApp","waiting","postMessage","location","reload","eventName","gtag","isInstalled","matchMedia","matches","standalone","getNetworkStatus","_navigator$connection","_navigator$connection2","_navigator$connection3","connectionType","connection","effectiveType","downlink","rtt","getStorageEstimate","storage","estimate","quota","usage","usageDetails","cleanup","removeEventListener","handleVisibilityChange","pwaUtils","usePWA","_s","setIsOnline","useState","setIsInstalled","setShowInstallPrompt","updateAvailable","setUpdateAvailable","useEffect","handleInstallPrompt","handleHideInstallPrompt","handleUpdateAvailable","networkStatus","storageEstimate"],"sources":["C:/Users/DELL/Documents/CascadeProjects/embedded/client/src/utils/pwa.js"],"sourcesContent":["/**\r\n * Progressive Web App utilities\r\n * Handles service worker registration, offline detection, and PWA features\r\n */\r\n\r\nimport React from 'react';\r\n\r\nclass PWAUtils {\r\n  constructor() {\r\n    this.deferredPrompt = null;\r\n    this.isOnline = navigator.onLine;\r\n    this.serviceWorker = null;\r\n    this.registration = null;\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.registerServiceWorker();\r\n    this.setupNetworkListeners();\r\n    this.setupInstallPrompt();\r\n    this.setupVisibilityChange();\r\n  }\r\n\r\n  // Service Worker Registration\r\n  async registerServiceWorker() {\r\n    if ('serviceWorker' in navigator) {\r\n      try {\r\n        this.registration = await navigator.serviceWorker.register('/sw.js', {\r\n          scope: '/'\r\n        });\r\n\r\n        console.log('[PWA] Service Worker registered:', this.registration.scope);\r\n\r\n        // Handle updates\r\n        this.registration.addEventListener('updatefound', () => {\r\n          const newWorker = this.registration.installing;\r\n          if (newWorker) {\r\n            newWorker.addEventListener('statechange', () => {\r\n              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                this.showUpdateNotification();\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Listen for messages from service worker\r\n        navigator.serviceWorker.addEventListener('message', (event) => {\r\n          this.handleServiceWorkerMessage(event);\r\n        });\r\n\r\n        return this.registration;\r\n      } catch (error) {\r\n        console.error('[PWA] Service Worker registration failed:', error);\r\n        return null;\r\n      }\r\n    } else {\r\n      console.warn('[PWA] Service Workers not supported');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Network status monitoring\r\n  setupNetworkListeners() {\r\n    window.addEventListener('online', () => {\r\n      this.isOnline = true;\r\n      this.handleNetworkChange(true);\r\n    });\r\n\r\n    window.addEventListener('offline', () => {\r\n      this.isOnline = false;\r\n      this.handleNetworkChange(false);\r\n    });\r\n  }\r\n\r\n  handleNetworkChange(isOnline) {\r\n    // Dispatch custom event for React components\r\n    const event = new CustomEvent('networkChange', {\r\n      detail: { isOnline }\r\n    });\r\n    window.dispatchEvent(event);\r\n\r\n    // Show notification\r\n    if (isOnline) {\r\n      this.showNotification('Back online! Syncing your changes...', 'success');\r\n      this.syncOfflineData();\r\n    } else {\r\n      this.showNotification('You\\'re offline. Changes will sync when back online.', 'warning');\r\n    }\r\n  }\r\n\r\n  // Install prompt handling\r\n  setupInstallPrompt() {\r\n    window.addEventListener('beforeinstallprompt', (event) => {\r\n      event.preventDefault();\r\n      this.deferredPrompt = event;\r\n\r\n      // Show install button\r\n      this.showInstallPrompt();\r\n    });\r\n\r\n    window.addEventListener('appinstalled', () => {\r\n      console.log('[PWA] App installed successfully');\r\n      this.hideInstallPrompt();\r\n      this.trackEvent('app_installed');\r\n    });\r\n  }\r\n\r\n  showInstallPrompt() {\r\n    const event = new CustomEvent('showInstallPrompt', {\r\n      detail: { prompt: this.deferredPrompt }\r\n    });\r\n    window.dispatchEvent(event);\r\n  }\r\n\r\n  hideInstallPrompt() {\r\n    const event = new CustomEvent('hideInstallPrompt');\r\n    window.dispatchEvent(event);\r\n  }\r\n\r\n  async installApp() {\r\n    if (!this.deferredPrompt) return false;\r\n\r\n    try {\r\n      this.deferredPrompt.prompt();\r\n      const { outcome } = await this.deferredPrompt.userChoice;\r\n\r\n      if (outcome === 'accepted') {\r\n        console.log('[PWA] User accepted install prompt');\r\n        this.trackEvent('install_prompt_accepted');\r\n      } else {\r\n        console.log('[PWA] User dismissed install prompt');\r\n        this.trackEvent('install_prompt_dismissed');\r\n      }\r\n\r\n      this.deferredPrompt = null;\r\n      return outcome === 'accepted';\r\n    } catch (error) {\r\n      console.error('[PWA] Install prompt failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Visibility change handling\r\n  setupVisibilityChange() {\r\n    document.addEventListener('visibilitychange', () => {\r\n      if (document.hidden) {\r\n        this.handleAppHidden();\r\n      } else {\r\n        this.handleAppVisible();\r\n      }\r\n    });\r\n  }\r\n\r\n  handleAppHidden() {\r\n    // Save any pending changes\r\n    this.savePendingChanges();\r\n  }\r\n\r\n  handleAppVisible() {\r\n    // Sync data and refresh if needed\r\n    if (this.isOnline) {\r\n      this.syncOfflineData();\r\n    }\r\n  }\r\n\r\n  // Offline data management\r\n  async savePendingChanges() {\r\n    try {\r\n      const pendingData = this.getPendingChanges();\r\n      if (pendingData && pendingData.length > 0) {\r\n        localStorage.setItem('pendingChanges', JSON.stringify(pendingData));\r\n        console.log('[PWA] Pending changes saved');\r\n      }\r\n    } catch (error) {\r\n      console.error('[PWA] Failed to save pending changes:', error);\r\n    }\r\n  }\r\n\r\n  async syncOfflineData() {\r\n    try {\r\n      const pendingChanges = localStorage.getItem('pendingChanges');\r\n      if (pendingChanges) {\r\n        const changes = JSON.parse(pendingChanges);\r\n\r\n        // Sync each change\r\n        for (const change of changes) {\r\n          await this.syncChange(change);\r\n        }\r\n\r\n        // Clear pending changes\r\n        localStorage.removeItem('pendingChanges');\r\n        console.log('[PWA] Offline data synced successfully');\r\n\r\n        this.showNotification('All changes synced successfully!', 'success');\r\n      }\r\n    } catch (error) {\r\n      console.error('[PWA] Failed to sync offline data:', error);\r\n      this.showNotification('Failed to sync some changes. Please try again.', 'error');\r\n    }\r\n  }\r\n\r\n  async syncChange(change) {\r\n    // Implement sync logic based on change type\r\n    switch (change.type) {\r\n      case 'project':\r\n        return this.syncProjectChange(change);\r\n      case 'circuit':\r\n        return this.syncCircuitChange(change);\r\n      case 'code':\r\n        return this.syncCodeChange(change);\r\n      default:\r\n        console.warn('[PWA] Unknown change type:', change.type);\r\n    }\r\n  }\r\n\r\n  // Background sync registration\r\n  async registerBackgroundSync(tag, data = {}) {\r\n    if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {\r\n      try {\r\n        await this.registration.sync.register(tag, {\r\n          data: data\r\n        });\r\n        console.log(`[PWA] Background sync registered: ${tag}`);\r\n      } catch (error) {\r\n        console.error(`[PWA] Background sync registration failed: ${tag}`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Push notifications\r\n  async requestNotificationPermission() {\r\n    if ('Notification' in window) {\r\n      const permission = await Notification.requestPermission();\r\n      return permission === 'granted';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async showNotification(title, body, options = {}) {\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const notificationOptions = {\r\n        icon: '/icons/icon-192x192.png',\r\n        badge: '/icons/icon-72x72.png',\r\n        vibrate: [100, 50, 100],\r\n        ...options\r\n      };\r\n\r\n      if (this.registration) {\r\n        this.registration.showNotification(title, {\r\n          body,\r\n          ...notificationOptions\r\n        });\r\n      } else {\r\n        new Notification(title, {\r\n          body,\r\n          ...notificationOptions\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Service worker message handling\r\n  handleServiceWorkerMessage(event) {\r\n    const { type, data } = event.data;\r\n\r\n    switch (type) {\r\n      case 'SYNC_COMPLETE':\r\n        this.showNotification('Sync complete!', 'Your offline changes have been saved.', 'success');\r\n        break;\r\n      case 'CACHE_UPDATED':\r\n        this.showNotification('App updated', 'A new version is available. Refresh to update.', 'info');\r\n        break;\r\n      case 'OFFLINE_READY':\r\n        this.showNotification('Offline ready', 'You can now work offline!', 'success');\r\n        break;\r\n      default:\r\n        console.log('[PWA] Service worker message:', type, data);\r\n    }\r\n  }\r\n\r\n  // Update handling\r\n  showUpdateNotification() {\r\n    const event = new CustomEvent('appUpdateAvailable');\r\n    window.dispatchEvent(event);\r\n  }\r\n\r\n  async updateApp() {\r\n    if (this.registration && this.registration.waiting) {\r\n      this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  // Analytics and tracking\r\n  trackEvent(eventName, data = {}) {\r\n    // Send to analytics service\r\n    if (window.gtag) {\r\n      window.gtag('event', eventName, data);\r\n    }\r\n\r\n    // Log for debugging\r\n    console.log('[PWA] Event tracked:', eventName, data);\r\n  }\r\n\r\n  // Utility methods\r\n  getPendingChanges() {\r\n    // Get pending changes from various sources\r\n    const changes = [];\r\n\r\n    // Add logic to collect pending changes from different parts of the app\r\n    // This would be implemented based on the specific data structures used\r\n\r\n    return changes;\r\n  }\r\n\r\n  isInstalled() {\r\n    return window.matchMedia('(display-mode: standalone)').matches ||\r\n           window.navigator.standalone === true;\r\n  }\r\n\r\n  getNetworkStatus() {\r\n    return {\r\n      isOnline: this.isOnline,\r\n      connectionType: navigator.connection?.effectiveType || 'unknown',\r\n      downlink: navigator.connection?.downlink || 0,\r\n      rtt: navigator.connection?.rtt || 0\r\n    };\r\n  }\r\n\r\n  // Storage management\r\n  async getStorageEstimate() {\r\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\r\n      try {\r\n        const estimate = await navigator.storage.estimate();\r\n        return {\r\n          quota: estimate.quota,\r\n          usage: estimate.usage,\r\n          usageDetails: estimate.usageDetails\r\n        };\r\n      } catch (error) {\r\n        console.error('[PWA] Storage estimate failed:', error);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Cleanup\r\n  cleanup() {\r\n    // Remove event listeners\r\n    window.removeEventListener('online', this.handleNetworkChange);\r\n    window.removeEventListener('offline', this.handleNetworkChange);\r\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst pwaUtils = new PWAUtils();\r\n\r\n// Export for use in React components\r\nexport default pwaUtils;\r\n\r\n// React hook for PWA functionality\r\nexport const usePWA = () => {\r\n  const [isOnline, setIsOnline] = React.useState(navigator.onLine);\r\n  const [isInstalled, setIsInstalled] = React.useState(pwaUtils.isInstalled());\r\n  const [showInstallPrompt, setShowInstallPrompt] = React.useState(false);\r\n  const [updateAvailable, setUpdateAvailable] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    const handleNetworkChange = (event) => {\r\n      setIsOnline(event.detail.isOnline);\r\n    };\r\n\r\n    const handleInstallPrompt = () => {\r\n      setShowInstallPrompt(true);\r\n    };\r\n\r\n    const handleHideInstallPrompt = () => {\r\n      setShowInstallPrompt(false);\r\n    };\r\n\r\n    const handleUpdateAvailable = () => {\r\n      setUpdateAvailable(true);\r\n    };\r\n\r\n    window.addEventListener('networkChange', handleNetworkChange);\r\n    window.addEventListener('showInstallPrompt', handleInstallPrompt);\r\n    window.addEventListener('hideInstallPrompt', handleHideInstallPrompt);\r\n    window.addEventListener('appUpdateAvailable', handleUpdateAvailable);\r\n\r\n    return () => {\r\n      window.removeEventListener('networkChange', handleNetworkChange);\r\n      window.removeEventListener('showInstallPrompt', handleInstallPrompt);\r\n      window.removeEventListener('hideInstallPrompt', handleHideInstallPrompt);\r\n      window.removeEventListener('appUpdateAvailable', handleUpdateAvailable);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    isOnline,\r\n    isInstalled,\r\n    showInstallPrompt,\r\n    updateAvailable,\r\n    installApp: () => pwaUtils.installApp(),\r\n    updateApp: () => pwaUtils.updateApp(),\r\n    networkStatus: pwaUtils.getNetworkStatus(),\r\n    storageEstimate: pwaUtils.getStorageEstimate()\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}