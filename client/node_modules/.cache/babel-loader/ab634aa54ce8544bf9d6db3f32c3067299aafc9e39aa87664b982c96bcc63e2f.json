{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\CascadeProjects\\\\embedded\\\\client\\\\src\\\\context\\\\ProjectContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/**\r\n * Project Context\r\n * Manages project state and operations\r\n */\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../utils/api';\nimport { useAuth } from './AuthContext';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectContext = /*#__PURE__*/createContext();\nexport const useProject = () => {\n  _s();\n  const context = useContext(ProjectContext);\n  if (!context) {\n    throw new Error('useProject must be used within a ProjectProvider');\n  }\n  return context;\n};\n_s(useProject, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ProjectProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [projects, setProjects] = useState([]);\n  const [currentProject, setCurrentProject] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [components, setComponents] = useState([]);\n\n  // Load user's projects on mount\n  useEffect(() => {\n    if (user) {\n      loadProjects();\n      loadComponents();\n    }\n  }, [user]);\n  const loadProjects = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/projects');\n      setProjects(response.data.data);\n    } catch (error) {\n      console.error('Failed to load projects:', error);\n      toast.error('Failed to load projects');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadComponents = async () => {\n    try {\n      const response = await api.get('/components');\n      setComponents(response.data.data);\n    } catch (error) {\n      console.error('Failed to load components:', error);\n      toast.error('Failed to load components');\n    }\n  };\n  const createProject = async projectData => {\n    try {\n      setLoading(true);\n      const response = await api.post('/projects', projectData);\n      const newProject = response.data.data;\n      setProjects(prev => [newProject, ...prev]);\n      setCurrentProject(newProject);\n      toast.success('Project created successfully!');\n      return {\n        success: true,\n        project: newProject\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to create project';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateProject = async (projectId, updates) => {\n    try {\n      setLoading(true);\n      const response = await api.put(`/projects/${projectId}`, updates);\n      const updatedProject = response.data.data;\n      setProjects(prev => prev.map(project => project._id === projectId ? updatedProject : project));\n      if ((currentProject === null || currentProject === void 0 ? void 0 : currentProject._id) === projectId) {\n        setCurrentProject(updatedProject);\n      }\n      toast.success('Project updated successfully!');\n      return {\n        success: true,\n        project: updatedProject\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to update project';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteProject = async projectId => {\n    try {\n      setLoading(true);\n      await api.delete(`/projects/${projectId}`);\n      setProjects(prev => prev.filter(project => project._id !== projectId));\n      if ((currentProject === null || currentProject === void 0 ? void 0 : currentProject._id) === projectId) {\n        setCurrentProject(null);\n      }\n      toast.success('Project deleted successfully!');\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to delete project';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadProject = async projectId => {\n    try {\n      setLoading(true);\n      const response = await api.get(`/projects/${projectId}`);\n      const project = response.data.data;\n      setCurrentProject(project);\n      return {\n        success: true,\n        project\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to load project';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateCircuit = async (projectId, circuitData) => {\n    try {\n      const response = await api.put(`/projects/${projectId}/circuit`, {\n        circuitData\n      });\n      const updatedProject = response.data.data;\n      if ((currentProject === null || currentProject === void 0 ? void 0 : currentProject._id) === projectId) {\n        setCurrentProject(updatedProject);\n      }\n      return {\n        success: true,\n        project: updatedProject\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const message = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to update circuit';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const updateCode = async (projectId, code) => {\n    try {\n      const response = await api.put(`/projects/${projectId}/code`, {\n        code\n      });\n      const updatedProject = response.data.data;\n      if ((currentProject === null || currentProject === void 0 ? void 0 : currentProject._id) === projectId) {\n        setCurrentProject(updatedProject);\n      }\n      return {\n        success: true,\n        project: updatedProject\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const message = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Failed to update code';\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const duplicateProject = async (projectId, newName) => {\n    try {\n      const originalProject = projects.find(p => p._id === projectId);\n      if (!originalProject) {\n        throw new Error('Project not found');\n      }\n      const duplicatedData = {\n        name: newName || `${originalProject.name} (Copy)`,\n        description: originalProject.description,\n        boardType: originalProject.boardType,\n        codeLanguage: originalProject.codeLanguage,\n        circuitData: originalProject.circuitData,\n        code: originalProject.code\n      };\n      return await createProject(duplicatedData);\n    } catch (error) {\n      toast.error('Failed to duplicate project');\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const value = {\n    projects,\n    currentProject,\n    components,\n    loading,\n    loadProjects,\n    loadComponents,\n    createProject,\n    updateProject,\n    deleteProject,\n    loadProject,\n    updateCircuit,\n    updateCode,\n    duplicateProject,\n    setCurrentProject\n  };\n  return /*#__PURE__*/_jsxDEV(ProjectContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s2(ProjectProvider, \"nDp2uTl3ebfRtljuv5OeSL/qrT8=\", false, function () {\n  return [useAuth];\n});\n_c = ProjectProvider;\nvar _c;\n$RefreshReg$(_c, \"ProjectProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","useAuth","toast","jsxDEV","_jsxDEV","ProjectContext","useProject","_s","context","Error","ProjectProvider","children","_s2","user","projects","setProjects","currentProject","setCurrentProject","loading","setLoading","components","setComponents","loadProjects","loadComponents","response","get","data","error","console","createProject","projectData","post","newProject","prev","success","project","_error$response","_error$response$data","message","updateProject","projectId","updates","put","updatedProject","map","_id","_error$response2","_error$response2$data","deleteProject","delete","filter","_error$response3","_error$response3$data","loadProject","_error$response4","_error$response4$data","updateCircuit","circuitData","_error$response5","_error$response5$data","updateCode","code","_error$response6","_error$response6$data","duplicateProject","newName","originalProject","find","p","duplicatedData","name","description","boardType","codeLanguage","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/CascadeProjects/embedded/client/src/context/ProjectContext.js"],"sourcesContent":["/**\r\n * Project Context\r\n * Manages project state and operations\r\n */\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../utils/api';\r\nimport { useAuth } from './AuthContext';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst ProjectContext = createContext();\r\n\r\nexport const useProject = () => {\r\n  const context = useContext(ProjectContext);\r\n  if (!context) {\r\n    throw new Error('useProject must be used within a ProjectProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ProjectProvider = ({ children }) => {\r\n  const { user } = useAuth();\r\n  const [projects, setProjects] = useState([]);\r\n  const [currentProject, setCurrentProject] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [components, setComponents] = useState([]);\r\n\r\n  // Load user's projects on mount\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadProjects();\r\n      loadComponents();\r\n    }\r\n  }, [user]);\r\n\r\n  const loadProjects = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get('/projects');\r\n      setProjects(response.data.data);\r\n    } catch (error) {\r\n      console.error('Failed to load projects:', error);\r\n      toast.error('Failed to load projects');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadComponents = async () => {\r\n    try {\r\n      const response = await api.get('/components');\r\n      setComponents(response.data.data);\r\n    } catch (error) {\r\n      console.error('Failed to load components:', error);\r\n      toast.error('Failed to load components');\r\n    }\r\n  };\r\n\r\n  const createProject = async (projectData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.post('/projects', projectData);\r\n      const newProject = response.data.data;\r\n\r\n      setProjects(prev => [newProject, ...prev]);\r\n      setCurrentProject(newProject);\r\n\r\n      toast.success('Project created successfully!');\r\n      return { success: true, project: newProject };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to create project';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateProject = async (projectId, updates) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.put(`/projects/${projectId}`, updates);\r\n      const updatedProject = response.data.data;\r\n\r\n      setProjects(prev =>\r\n        prev.map(project =>\r\n          project._id === projectId ? updatedProject : project\r\n        )\r\n      );\r\n\r\n      if (currentProject?._id === projectId) {\r\n        setCurrentProject(updatedProject);\r\n      }\r\n\r\n      toast.success('Project updated successfully!');\r\n      return { success: true, project: updatedProject };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to update project';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteProject = async (projectId) => {\r\n    try {\r\n      setLoading(true);\r\n      await api.delete(`/projects/${projectId}`);\r\n\r\n      setProjects(prev => prev.filter(project => project._id !== projectId));\r\n\r\n      if (currentProject?._id === projectId) {\r\n        setCurrentProject(null);\r\n      }\r\n\r\n      toast.success('Project deleted successfully!');\r\n      return { success: true };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to delete project';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadProject = async (projectId) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.get(`/projects/${projectId}`);\r\n      const project = response.data.data;\r\n\r\n      setCurrentProject(project);\r\n      return { success: true, project };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to load project';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateCircuit = async (projectId, circuitData) => {\r\n    try {\r\n      const response = await api.put(`/projects/${projectId}/circuit`, {\r\n        circuitData\r\n      });\r\n\r\n      const updatedProject = response.data.data;\r\n\r\n      if (currentProject?._id === projectId) {\r\n        setCurrentProject(updatedProject);\r\n      }\r\n\r\n      return { success: true, project: updatedProject };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to update circuit';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const updateCode = async (projectId, code) => {\r\n    try {\r\n      const response = await api.put(`/projects/${projectId}/code`, { code });\r\n\r\n      const updatedProject = response.data.data;\r\n\r\n      if (currentProject?._id === projectId) {\r\n        setCurrentProject(updatedProject);\r\n      }\r\n\r\n      return { success: true, project: updatedProject };\r\n    } catch (error) {\r\n      const message = error.response?.data?.error || 'Failed to update code';\r\n      toast.error(message);\r\n      return { success: false, error: message };\r\n    }\r\n  };\r\n\r\n  const duplicateProject = async (projectId, newName) => {\r\n    try {\r\n      const originalProject = projects.find(p => p._id === projectId);\r\n      if (!originalProject) {\r\n        throw new Error('Project not found');\r\n      }\r\n\r\n      const duplicatedData = {\r\n        name: newName || `${originalProject.name} (Copy)`,\r\n        description: originalProject.description,\r\n        boardType: originalProject.boardType,\r\n        codeLanguage: originalProject.codeLanguage,\r\n        circuitData: originalProject.circuitData,\r\n        code: originalProject.code\r\n      };\r\n\r\n      return await createProject(duplicatedData);\r\n    } catch (error) {\r\n      toast.error('Failed to duplicate project');\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    projects,\r\n    currentProject,\r\n    components,\r\n    loading,\r\n    loadProjects,\r\n    loadComponents,\r\n    createProject,\r\n    updateProject,\r\n    deleteProject,\r\n    loadProject,\r\n    updateCircuit,\r\n    updateCode,\r\n    duplicateProject,\r\n    setCurrentProject\r\n  };\r\n\r\n  return (\r\n    <ProjectContext.Provider value={value}>\r\n      {children}\r\n    </ProjectContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}